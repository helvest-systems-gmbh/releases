# The idea is that every day at midnight (i.e. 0 0 * * * in cron syntax), we
# fetch main repos (for now only the hp100 one) and see if there any new releses.
# These are marked with a tag formatted as follows `release-vX.Y`. If there is one,
# we build, encrypt and upload it to the repo.
#
# NOTE: source its based on https://github.com/ethereum/solc-bin/blob/gh-pages/.github/workflows/nightly-emscripten.yml

name: Build new release and push it to github

on: [push]
#   schedule:
#     - cron: "0 0 * * *"

env:
  RELEASE_BRANCH: release
  COMMITTER_NAME: release-gh-action
  COMMITTER_EMAIL: releases@ethereum.org

jobs:
  build-release:
    runs-on: ubuntu-latest
    outputs:
      full-release-version: ${{ env.FULL_RELEASE_VERSION }}
      release-already-exists: ${{ env.RELEASE_ALREADY_EXISTS }}

    steps:
      - uses: actions/checkout@v2
        with:
          repository: "helvest-systems-gmbh/hp100"
          ref: ${{ env.RELEASE_BRANCH }}
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
          path: hp100

      - name: Clone releases repository without checking out a working copy
        run: |
          git clone --no-checkout --branch main "https://github.com/${GITHUB_REPOSITORY}.git" releases/

          # For some reason git stages all files for deletion when you use --no-checkout
          cd releases/
          git reset HEAD --quiet

      - name: Determine new release version
        run: |
          cd hp100/
          last_commit_timestamp=$(git log -1 --date=iso --format=%ad HEAD)
          last_commit_date=$(date --date="$last_commit_timestamp" --utc +%Y.%-m.%-d)
          last_commit_hash=$(git rev-parse --short=8 HEAD)
          release_version=$(echo "2.5")
          full_release_version="v${release_version}.${last_commit_date}+commit.${last_commit_hash}"

          echo "LAST_COMMIT_DATE=${last_commit_date}" >> $GITHUB_ENV
          echo "LAST_COMMIT_HASH=${last_commit_hash}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${release_version}" >> $GITHUB_ENV
          echo "FULL_RELEASE_VERSION=${full_release_version}" >> $GITHUB_ENV

      - name: Check if there's already a release with the same date or commit ID
        run: |
          cd releases/
          matching_release_in_the_repo="$(
            git ls-files "hp100/hp100-firmware-v${RELEASE_VERSION}.${LAST_COMMIT_DATE}+commit.*.hex";
            git ls-files "hp100/hp100-firmware-v${RELEASE_VERSION}.*+commit.${LAST_COMMIT_HASH}.hex"
          )"
          release_already_exists="$(test -n "$matching_release_in_the_repo" && echo true || echo false)"

          # There's no way to just stop a job without failing and that would spam everyone with
          # spurious e-mail notifications about the failure. Instead we have to make do with `if`s.
          echo "RELEASE_ALREADY_EXISTS=${release_already_exists}" >> $GITHUB_ENV
  
      - name: Install AVR toolchain
        run: sudo apt-get install binutils gcc-avr avr-libc
      
      - name: Check dependencies version
        run: avr-g++ --version
        
      - name: Build firmware release
        run: |
          cd hp100
          make
      
      - name: Encrypt firmware release
        env:
          ENCRYPTION_KEY: ${{ secrets.RELEASE_ENCRYPTION_KEY }}
        run: |
          cd hp100
          npm install -g @prgx/cli
          prgx encrypt main.hex -k "$ENCRYPTION_KEY" -o hp100-firmware.hex

      - name: Upload release hex as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: hp100-firmware.hex
          path: hp100/hp100-firmware.hex

  add-release-and-push:
    runs-on: ubuntu-latest
    needs: build-release

    env:
      FULL_RELEASE_VERSION: ${{ needs.build-release.outputs.full-release-version }}

    if: "needs.build-release.outputs.release-already-exists == 'false'"
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ env.TARGET_BRANCH }}
          path: "releases"

      - name: Download firmware artifact
        uses: actions/download-artifact@v2
        with:
          name: hp100-firmware.hex

      - name: Set committer name and e-mail
        run: |
          cd releases/
          git config --local user.name "$COMMITTER_NAME"
          git config --local user.email "$COMMITTER_EMAIL"

      - name: Run add-release-and-push.sh
        run: |
          cd releases/
          sh ./add-release-and-push.sh ../hp100-firmware.hex "$FULL_RELEASE_VERSION"
